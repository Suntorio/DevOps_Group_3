<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1360.vc6700e3136f5">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3806.va_3a_6988277b_2">
    <script>pipeline {
    agent any
    tools {
        terraform &apos;tf1.6&apos;
    }

    stages {
        stage(&apos;Clone Git repo&apos;) {
            steps {
                git(
                    branch: &apos;master&apos;, 
                    url: &apos;https://github.com/Suntorio/DevOps_Group_3.git&apos;, 
                    credentialsId: &apos;access_to_git&apos;
                )
            }
        }
        
        stage(&apos;Install Ansible&apos;) {
            steps {
        sh &apos;&apos;&apos;
        sudo apt-add-repository ppa:ansible/ansible -y
        sudo apt-get update
        sudo apt-get install ansible -y
        &apos;&apos;&apos;
            }
        }

        stage(&apos;Terraform Plan&apos;) {
            steps {
                sh &apos;&apos;&apos;
                cd ./jenkins/terraform_ansible_generic_instace_setup_template
                echo &quot;yes&quot; | terraform init
                terraform plan -out=terraform.tfplan
                &apos;&apos;&apos;
            }
        }

        stage(&apos;Plan verification and user input&apos;) {
            steps {
                input(
                    message: &apos;proceed or abort?&apos;, 
                    ok: &apos;ok&apos;
                )
            }
        }

        stage(&apos;Terraform Apply&apos;) {
            steps {
                sh &apos;&apos;&apos;
                cd ./jenkins/terraform_ansible_generic_instace_setup_template
                terraform apply terraform.tfplan
                &apos;&apos;&apos;
            }
        }

        stage(&apos;Get Terraform Outputs&apos;) {
            steps {
                sh &apos;&apos;&apos;
                cd ./jenkins/terraform_ansible_generic_instace_setup_template
                terraform output web-address-nodejs &gt; ./ansible/instance_ip.txt
                &apos;&apos;&apos;
            }
        }

        stage(&apos;Run Ansible&apos;) {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: &apos;access_for_new_node_js_app&apos;, keyFileVariable: &apos;SSH_KEY&apos;)]) {
                    sh &apos;&apos;&apos;
                    sleep 180
                    cd ./jenkins/terraform_ansible_generic_instace_setup_template/ansible
                    ansible-playbook -i instance_ip.txt playbook_apache.yaml -u ubuntu --private-key=$SSH_KEY -e &apos;ansible_ssh_common_args=&quot;-o StrictHostKeyChecking=no&quot;&apos;
                    &apos;&apos;&apos;
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>